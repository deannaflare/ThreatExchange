{# Copyright (c) Meta Platforms, Inc. and affiliates. #}
<h3> Banks </h3>
<div class="w-50 my-1">
    <form action="/ui/create_bank" method="post" enctype="multipart/form-data" id="banks_grid_form">
        <div class="input-group mb-3">
            <input type="text" class="form-control" name="bank_name" placeholder="Name" id="create_bank_bank_name" required>
            <button type="submit" class="btn btn-outline-success" id="create_bank_submit">Create New Bank</button>
        </div>
        <span id="bank-name-error" class="text-danger"></span>
    </form>
</div>
<div class="row row-cols-1 row-cols-md-4 g-4">
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Bank Name</th>
                <th scope="col">Matching Enabled Ratio</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
        {% for bank in bankList %}
            <tr>
                <th scope="row">{{ loop.index }}</th>
                <td>{{ bank['name'] }}</td>
                <td>{{ bank['matching_enabled_ratio'] }}</td>
                <td>
                    {% with bank_title=bank['name'] %}
                        {% include 'components/add_to_bank_form.html.j2' with context %}
                    {% endwith %}
                </td>
            </tr>
        {% endfor %}
        </tbody>
        
    </table>
</div>
<script>
    document.getElementById('create_bank_bank_name').addEventListener('blur', function() {
        const bankNameField = this;
        // auto uppercase and trim input
        bankNameField.value = bankNameField.value.trim().toUpperCase();
        const submitButton = document.getElementById('create_bank_submit');
        submitButton.disabled = true;
        const errorSpan = document.getElementById('bank-name-error');
        errorSpan.textContent = ''; // Clear previous error message
        const regex = /^[A-Z0-9_]+$/;

        // Validate the input
        if (!regex.test(bankNameField.value)) {
            errorSpan.textContent = 'Bank name must be all uppercase and snake cased';
            bankNameField.classList.remove("is-valid");
            bankNameField.classList.add("is-invalid");
        } else {
            submitButton.disabled = false;
            bankNameField.classList.remove("is-invalid");
            bankNameField.classList.add("is-valid");
        }
    });

    document.getElementById("banks_grid_form").addEventListener("submit", async event => {
        event.preventDefault();

        fetch(`/c/banks`, {
            method: 'POST',
            body: JSON.stringify({name: document.getElementById('create_bank_bank_name').value}),
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
        })
            .then(async response => {
                if (response.ok) {
                    window.location.reload();
                } else {
                    json = await response.json()
                    alert("Create Bank failed! " + response.statusText + " : " + (json['message'] ?? '<no message>)'))
                }
            });
    })

    const banksData = [
        {% for bank in bankList %}
        {
            name: "{{ bank.name|e }}"
        }{% if not loop.last %},{% endif %}
        {% endfor %}
    ];

    banksData.forEach(function(bank) {
        const bankTitle=bank.name;
        const add_content_modal = document.getElementById(bankTitle);
        const add_content_to_bank_form = document.getElementById("add_content_to_bank_" + bankTitle);
        const content_result = document.getElementById("hash_result_" + bankTitle);

        add_content_to_bank_form.addEventListener("submit", (event) => {
            event.preventDefault();
            const formData = new FormData(event.target);
            formData.append(event.target.content_type.value, event.target.file.files[0]);
            formData.delete("file");

            fetch(`/c/bank/${bankTitle}/content`, {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    // Handle the response from the server here
                    renderAddBankResult(data);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        })



        // reset hash innerHTML
        add_content_modal.addEventListener('hidden.bs.modal', function () {
            content_result.innerHTML = ""
        });

        const renderAddBankResult = (result) => {
        const hashHeader = `
                    <h4>Added Hashes:</h4>
                    <p>Content ID: ${result.id}</p>
                `;

            // Render hashes table
            const hashesTableHTML = renderHashTable(result.signals);

            // render on HTML
            content_result.innerHTML = hashHeader + hashesTableHTML;
        }

        const renderHashTable = (hashes) => {
            return `
                        <h3>Hash Values:</h3>
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Key</th>
                                    <th>Value</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${Object.entries(hashes).map(([key, value]) => `
                                    <tr>
                                        <td>${key}</td>
                                        <td>${value}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                           
                        </table>
                    `;
        }

  });
    
</script>